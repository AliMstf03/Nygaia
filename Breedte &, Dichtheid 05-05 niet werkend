import halcon as ha
from BreedteClass import Breedte
from halcon import read_image, threshold, area_center, height_width_ratio, gen_rectangle1, reduce_domain
from tkinter import Frame
from tkinter import Label, Button, Entry, Tk
from PIL import Image, ImageTk

class Dichtheid:
    
    def __init__(self, pad):
        self.pad = pad
        self.GemiddeldeAreaPerAfbeelding = None

        
        
    def BerekenTotaalAantalAreaPixels(self, image):
        TotaalAantalAreaPixels = 0
        for Regels in range (1, 1024):
            self.Rectangle1    = gen_rectangle1(Regels, 0, Regels, 8196)
            self.ImageReduced  = reduce_domain(image,self.Rectangle1)
            self.DrempelWaarde = threshold(self.ImageReduced, 8, 80)
            self.Gebied        = area_center(self.DrempelWaarde)
            self.int_Gebied    = int(''.join(map(str, self.Gebied[0]))) 
            TotaalAantalAreaPixels += self.int_Gebied
        return TotaalAantalAreaPixels
    
    def BerekenGemiddeldeAreaPerAfbeelding(self):
        
        for self.Afbeeldingen in range (100,102):
            #image1 = read_image(f'C:/Users/alims/OneDrive/Documenten/AfbeeldingenNygaia/image_00{self.Afbeeldingen}.png')
            #pad = self.totaal.get_pad()
            image2 = read_image(self.pad)
            GemiddeldeAreaPerlijn       = self.BerekenTotaalAantalAreaPixels(image2) / 1024
            self.GemiddeldeAreaPerAfbeelding = GemiddeldeAreaPerlijn / 8196
            self.GemiddeldeAreaPerAfbeelding = round(GemiddeldeAreaPerlijn / 8196, 3) * 100

            print(f"{self.GemiddeldeAreaPerAfbeelding} en {GemiddeldeAreaPerlijn}")


class Totaal(Frame):
    
    def __init__(self,  master=None):
        super().__init__(master)
        self.master = master
        self.master.title("Nygaia Analyse")
        self.configure(background="white")
        self.configure(width=800, height=500)
        self.pack()

        # Instellingen
        self.afbeeldingnummer = 101
        self.afbeelding_pad = "C:/Users/alims/OneDrive/Documenten/AfbeeldingenNygaia"
        self.pad = f"{self.afbeeldingnummer}/image00{self.afbeeldingnummer:03}.png"
        
        self.dichtheid_instance = Dichtheid(self.pad)
        self.dichtheid_instance.BerekenGemiddeldeAreaPerAfbeelding()
        
        # Afbeelding zelf
        self.label_afbeelding = Label(self, bg="black")
        self.label_afbeelding.place(x=100, y=140, width=300, height=80)

        # Vorige knop (links van afbeelding)
        self.vorige = Button(self, text="←", command=self.vorige_afbeelding)
        self.vorige.place(x=60, y=165, width=30, height=30)

        # Volgende knop (rechts van afbeelding)
        self.volgende = Button(self, text="→", command=self.volgende_afbeelding)
        self.volgende.place(x=410, y=165, width=30, height=30)

        # Label: Gemiddelde breedte
        self.breedte_label = Label(self, text="De Gemiddelde breedte van de mat is:", anchor="w")
        self.breedte_label.place(x=450, y=130, width=280, height=30)
        self.breedte_waarde = Label(self, bg="white", relief="solid")
        self.breedte_waarde.place(x=720, y=130, width=60, height=30)

        # Label: Gemiddelde dichtheid
        self.dichtheid_label = Label(self, text="De gemiddelde dichtheid van de mat is:", anchor="w")
        self.dichtheid_label.place(x=450, y=200, width=280, height=30)
        self.dichtheid_waarde = Label(self, bg="white", relief="solid")
        self.dichtheid_waarde.place(x=720, y=200, width=60, height=30)

        # Start met afbeelding laden
        self.update_afbeelding()

    def vorige_afbeelding(self):
        self.afbeeldingnummer -= 1
        self.update_afbeelding()

    def volgende_afbeelding(self):
        self.afbeeldingnummer += 1
        self.update_afbeelding()

    def update_afbeelding(self):
        self.pad = f"{self.afbeelding_pad}/image_00{self.afbeeldingnummer:03}.png"
        try:
            afbeelding = Image.open(self.pad)
            afbeelding = afbeelding.resize((250, 250))
            self.photo = ImageTk.PhotoImage(afbeelding)
            self.label_afbeelding.config(image=self.photo)
            self.label_afbeelding.image = self.photo  # referentie vasthouden

            # Voorbeeldwaarden (hier kan je HALCON-analyse toevoegen)
            self.breedte_waarde.config(text="7.8")
            self.dichtheid_waarde.config(text=str(self.dichtheid_instance.GemiddeldeAreaPerAfbeelding) + "%")
            print(f"Zoekpad: {self.pad}")


        except Exception as e:
            print(f"Fout bij laden afbeelding: {e}")
            self.label_afbeelding.config(text="Afbeelding niet gevonden", image="")
            self.label_afbeelding.image = None
            
    def get_pad (self):
            return self.pad
        
        
