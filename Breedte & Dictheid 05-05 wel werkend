import os
from tkinter import Frame, Label, Button
from PIL import Image, ImageTk
from halcon import read_image, threshold, area_center, gen_rectangle1, reduce_domain


class Dichtheid:
    def __init__(self, pad):
        self.pad = pad
        self.GemiddeldeAreaPerAfbeelding = 0

    def BerekenTotaalAantalAreaPixels(self, image):
        totaal = 0
        for regel in range(1, 1024):
            rect = gen_rectangle1(regel, 0, regel, 8196)
            reduced = reduce_domain(image, rect)
            drempel = threshold(reduced, 8, 80)
            gebied = area_center(drempel)
            if gebied and isinstance(gebied[0], (int, float)):
             totaal += int(gebied[0])
            elif gebied and isinstance(gebied[0], list) and len(gebied[0]) > 0:
                totaal += int(gebied[0][0])

        return totaal

    def BerekenGemiddeldeAreaPerAfbeelding(self):
        if not os.path.exists(self.pad):
            print(f"[FOUT] Afbeelding niet gevonden: {self.pad}")
            return 0

        try:
            image = read_image(self.pad)
            gemiddeld_per_lijn = self.BerekenTotaalAantalAreaPixels(image) / 1024
            self.GemiddeldeAreaPerAfbeelding = round(gemiddeld_per_lijn / 8196, 3) * 100
            return self.GemiddeldeAreaPerAfbeelding
        except Exception as e:
            print(f"[FOUT] HALCON fout tijdens analyse: {e}")
            return 0


class Totaal(Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("Nygaia Analyse")
        self.configure(background="white", width=800, height=500)
        self.pack()

        # Instellingen
        self.afbeeldingnummer = 101
        self.afbeelding_pad = "C:/Users/alims/OneDrive/Documenten/AfbeeldingenNygaia"
        self.pad = self.build_pad()

        # UI: Afbeelding
        self.label_afbeelding = Label(self, bg="black")
        self.label_afbeelding.place(x=100, y=140, width=300, height=80)

        self.vorige = Button(self, text="←", command=self.vorige_afbeelding)
        self.vorige.place(x=60, y=165, width=30, height=30)

        self.volgende = Button(self, text="→", command=self.volgende_afbeelding)
        self.volgende.place(x=410, y=165, width=30, height=30)

        # Labels
        self.breedte_label = Label(self, text="De Gemiddelde breedte van de mat is:", anchor="w")
        self.breedte_label.place(x=450, y=130, width=280, height=30)
        self.breedte_waarde = Label(self, bg="white", relief="solid")
        self.breedte_waarde.place(x=720, y=130, width=60, height=30)

        self.dichtheid_label = Label(self, text="De gemiddelde dichtheid van de mat is:", anchor="w")
        self.dichtheid_label.place(x=450, y=200, width=280, height=30)
        self.dichtheid_waarde = Label(self, bg="white", relief="solid")
        self.dichtheid_waarde.place(x=720, y=200, width=60, height=30)

        self.update_afbeelding()

    def build_pad(self):
        return f"{self.afbeelding_pad}/image_00{self.afbeeldingnummer:03}.png"

    def vorige_afbeelding(self):
        self.afbeeldingnummer -= 1
        self.update_afbeelding()

    def volgende_afbeelding(self):
        self.afbeeldingnummer += 1
        self.update_afbeelding()

    def update_afbeelding(self):
        self.pad = self.build_pad()

        if not os.path.exists(self.pad):
            self.label_afbeelding.config(text="Afbeelding niet gevonden", image="")
            self.label_afbeelding.image = None
            print(f"[FOUT] Bestandsnaam ongeldig: {self.pad}")
            return

        try:
            afbeelding = Image.open(self.pad)
            afbeelding = afbeelding.resize((250, 250))
            self.photo = ImageTk.PhotoImage(afbeelding)
            self.label_afbeelding.config(image=self.photo)
            self.label_afbeelding.image = self.photo

            # Breedte: voorlopig hardcoded
            self.breedte_waarde.config(text="7.8")

            # Dichtheid berekenen
            self.dichtheid_instance = Dichtheid(self.pad)
            dichtheid = self.dichtheid_instance.BerekenGemiddeldeAreaPerAfbeelding()
            self.dichtheid_waarde.config(text=f"{dichtheid:.2f}%")

        except Exception as e:
            print(f"[FOUT] Kan afbeelding niet openen: {e}")
            self.label_afbeelding.config(text="Fout bij laden", image="")
            self.label_afbeelding.image = None

    def get_pad(self):
        return self.pad


---------------------------------

from tkinter import Tk
from Totaal import Totaal

if __name__ == "__main__":
    root = Tk()
    app = Totaal(master=root)
    app.mainloop()
