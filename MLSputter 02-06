import torch
import torchvision
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from tqdm import tqdm
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import numpy as np

# Model
class SimpleDiscriminatorNygaia(nn.Module):
    def __init__(
        self
    ):
        super(SimpleDiscriminatorNygaia, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(1, 64, 4, stride=2, padding=1, bias=False), # width *0.5 
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(64, 128, 4, stride=2, padding=1, bias=False), # width *0.5 
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(128, 256, 4, stride=2, padding=1, bias=False), # width *0.5
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(256, 512, 4, stride=2, padding=1, bias=False), # width *0.5 
            nn.LeakyReLU(0.2, inplace=True),
            nn.Flatten(),
            nn.Linear(262144,1000),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Dropout(0.1,),
            nn.Linear(1000,1),
            nn.Sigmoid()
        )

    def forward(self, x):
        feat = self.conv(x)
        return feat
    
    
    
class Sputters(nn.Module):
    def __init__(self, in_channels=1):
        super().__init__()
        self.conv1 = nn.Conv2d(in_channels, 16, kernel_size=3, stride=1, padding=2)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=2)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=2)
        self.pool3 = nn.MaxPool2d(2, 2)

        with torch.no_grad():
            dummy = torch.zeros(1, in_channels, 100, 800)
            x = self.pool1(F.relu(self.conv1(dummy)))
            x = self.pool2(F.relu(self.conv2(x)))
            x = self.pool3(F.relu(self.conv3(x)))
            feature_size = x.view(1, -1).shape[1]

        self.flatten = nn.Flatten()
        self.drop1 = nn.Dropout(0.3)
        self.out = nn.Linear(feature_size, 1)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.pool1(x)
        x = F.relu(self.conv2(x))
        x = self.pool2(x)
        x = F.relu(self.conv3(x))
        x = self.pool3(x)
        x = self.flatten(x)
        x = self.drop1(x)
        x = torch.sigmoid(self.out(x))
        return x



# ======================= SETUP ========================
device = "cuda" if torch.cuda.is_available() else "cpu"

transform = transforms.Compose([
    transforms.Grayscale(num_output_channels=1),
    transforms.Resize((128, 1024)),
    transforms.RandomHorizontalFlip(p=0.5),  #  horizontale flip
    #transforms.ColorJitter(brightness=(0.9, 1.1)),  #  helderheid variatie
    transforms.ToTensor()
])

data_path_train = "C:/Users/alims/Documents/NygaiaMLTrain/"
data_path_test = "C:/Users/alims/Documents/NygaiaMLTest/"

train_dataset = ImageFolder(root=data_path_train, transform=transform)
test_dataset = ImageFolder(root=data_path_test, transform=transform)

batch_size = 6
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

model = SimpleDiscriminatorNygaia().to(device)
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=1e-4)


num_epochs = 15

for epoch in range(num_epochs):
    print(f"Epoch [{epoch + 1}/{num_epochs}]")

    # Training 
    model.train()
    running_loss = 0.0
    for data, targets in tqdm(train_loader):
        data = data.to(device)
        targets = targets.to(device).float()

        optimizer.zero_grad()

        scores = model(data).squeeze(1)
        loss = criterion(scores, targets)
        
        print(targets)
        print(scores)
        print(loss)

        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    avg_train_loss = running_loss / len(train_loader)
    print(f"Train Loss: {avg_train_loss:.4f}")

    #Testing 
    model.eval()
    test_loss = 0.0
    with torch.no_grad():
        for data, targets in test_loader:
            data = data.to(device)
            targets = targets.to(device).float()
            scores = model(data).squeeze(1)
            loss = criterion(scores, targets)
            test_loss += loss.item()

    avg_test_loss = test_loss / len(test_loader)
    print(f"Test Loss: {avg_test_loss:.4f}")

    # NAuwkeurigheid
    def check_accuracy(loader, model, name):
        num_correct = 0
        num_samples = 0
    
        
        with torch.no_grad():
            for x, y in loader:
                x = x.to(device)
                y = y.to(device)
                scores = model(x)
                preds = (scores > 0.5).float().view(-1)
                y = y.view(-1)
             
                num_correct += (preds == y).sum().item()
                num_samples += y.size(0)
        
        acc = 100.0 * num_correct / num_samples
        print(f"{name} Accuracy: {acc:.2f}%")
        
       

    check_accuracy(train_loader, model, "Train")
    check_accuracy(test_loader, model, "Test")

def plot_batch_sample(loader):
    images, labels = next(iter(loader))
    
    image = images[0]
    label = labels[0].item()
    
    print (f"Tensor vorm: {image.shape} (C, H, W)")
    print (f"Label : {label}")
    
    img = image.squeeze(0).numpy()
    
    plt.imshow(img, cmap="grey")
    plt.title(f"Label : {label}")
    plt.axis('off')
    plt.show()
    
print("Training complete.")
plot_batch_sample(train_loader)
